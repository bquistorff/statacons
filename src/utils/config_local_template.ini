[Programs]
# Use forward slashes for paths

# stata_exe -- path to Stata exe

# statacons can automatically detect Stata installations in most standard setups
# you can see what statacons has picked by typing
# statacons -n --show-config
# at the stata prompt
# if you have a non-standard setup or want to change from what statacons chooses
# set stata_exe below. We have added some standard examples
# Type  di "`c(sysdir_stata)'" at the stata prompt if you are unsure of the path to your exe
# 

# Windows
# Stata 17
#stata_exe: "C:/Program Files/Stata17/StataMP-64.exe" 
#stata_exe: "C:/Program Files/Stata17/StataSE-64.exe" 
#stata_exe: "C:/Program Files/Stata17/StataBE-64.exe" 
# Stata 16
#stata_exe: "C:/Program Files/Stata16/StataMP-64.exe" 
#stata_exe: "C:/Program Files/Stata16/StataSE-64.exe" 
#stata_exe: "C:/Program Files/Stata16/StataIC-64.exe" 

# Macintosh
# on Mac, c(sysdir_stata) does not give the full path to the executable 
# see the "Getting Started With Stata for Macintosh" manual
# especially B.3 "Stata Batch Mode"
# Stata 17
#stata_exe: /Applications/Stata/StataMP.app/Contents/MacOS/StataMP
#stata_exe: /Applications/Stata/StataSE.app/Contents/MacOS/StataSE
#stata_exe: /Applications/Stata/StataBE.app/Contents/MacOS/StataBE
# Stata 16
#stata_exe: /Applications/Stata/StataMP.app/Contents/MacOS/StataMP
#stata_exe: /Applications/Stata/StataSE.app/Contents/MacOS/StataSE
#stata_exe: /Applications/Stata/Stata.app/Contents/MacOS/Stata

# Unix
# see "Getting Started With Stata for Unix"
# B.2 "Advanced starting of Stata for Unix" and
# B.3 "Stata Batch Mode"
#stata_exe: /usr/local/stata17/stata-mp
#stata_exe: /usr/local/stata17/stata-se
#stata_exe: /usr/local/stata16/stata-mp
#stata_exe: /usr/local/stata16/stata-se
# unix IC/BE has no extension
#stata_exe: /usr/local/stata17/stata
#stata_exe: /usr/local/stata16/stata



[SCons]
# What to do with Stata batch-mode logs when successful (error logs always left)
# empty for delete 
success_batch_log_dir:
# provide path to destination to move 
#success_batch_log_dir: logs/
# "." to stay in root
#.


[Project]
# examples of directory paths
# do *not* enclose path in quotation marks, even if there are spaces

# overleaf
#overleaf_dir: C:/Users/UserName/Dropbox/apps/Overleaf/ProjectName
# reference in SConstruct as env['CONFIG']['Project']['overleaf_dir']

# dropbox
#dropbox_dir: C:/Users/UserName/Dropbox/ProjectName
# reference in SConstruct as env['CONFIG']['Project']['dropbox_dir']

# cache directory 
#  relative path to local folder "scons_cache"
#cache_dir: ./scons_cache
#  shared scons_cache folder on dropbox 
#cache_dir: C:/Users/UserName/Dropbox/path/to/scons_cache
#  reference in SConstruct as env['CONFIG']['Project']['cache_dir'], i.e.
#  CacheDir(env['CONFIG']['Project']['cache_dir'])
# shared scons_cache folder on Google Drive mapped to Q:/ My Drive
#  note that despite the space in My Drive we do not enclose in quotes
#  Google Drive is not currently recommended, see paper for discussion
#cache_dir: Q:/My Drive/path/to/scons_cache
#  reference in SConstruct as env['CONFIG']['Project']['cache_dir'], i.e.
#  CacheDir(env['CONFIG']['Project']['cache_dir'])

#  confusingly, if we were to hard-code a path with spaces into 
#  CacheDir() in the SConstruct, we *would* need to enclose in quotes: 
#  CacheDir("Q:/My Drive/path/to/scons_cache")

